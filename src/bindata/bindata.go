// Code generated by go-bindata.
// sources:
// static/bootstrap/css/bootstrap-theme.css
// static/bootstrap/css/bootstrap-theme.css.map
// static/bootstrap/css/bootstrap-theme.min.css
// static/bootstrap/css/bootstrap-theme.min.css.map
// static/bootstrap/css/bootstrap.css
// static/bootstrap/css/bootstrap.css.map
// static/bootstrap/css/bootstrap.min.css
// static/bootstrap/css/bootstrap.min.css.map
// static/bootstrap/fonts/glyphicons-halflings-regular.eot
// static/bootstrap/fonts/glyphicons-halflings-regular.svg
// static/bootstrap/fonts/glyphicons-halflings-regular.ttf
// static/bootstrap/fonts/glyphicons-halflings-regular.woff
// static/bootstrap/fonts/glyphicons-halflings-regular.woff2
// static/bootstrap/js/bootstrap.js
// static/bootstrap/js/bootstrap.min.js
// static/bootstrap/js/npm.js
// static/bootstrap~old/css/bootstrap-theme.css
// static/bootstrap~old/css/bootstrap-theme.css.map
// static/bootstrap~old/css/bootstrap-theme.min.css
// static/bootstrap~old/css/bootstrap-theme.min.css.map
// static/bootstrap~old/css/bootstrap.css
// static/bootstrap~old/css/bootstrap.css.map
// static/bootstrap~old/css/bootstrap.min.css
// static/bootstrap~old/css/bootstrap.min.css.map
// static/bootstrap~old/fonts/glyphicons-halflings-regular.eot
// static/bootstrap~old/fonts/glyphicons-halflings-regular.svg
// static/bootstrap~old/fonts/glyphicons-halflings-regular.ttf
// static/bootstrap~old/fonts/glyphicons-halflings-regular.woff
// static/bootstrap~old/fonts/glyphicons-halflings-regular.woff2
// static/bootstrap~old/js/bootstrap.js
// static/bootstrap~old/js/bootstrap.min.js
// static/bootstrap~old/js/npm.js
// static/css/ie10-viewport-bug-workaround.css
// static/css/jquery-3.1.1.min.js
// static/css/prism.min.css
// static/css/sticky-footer-navbar.css
// static/css/tt_overview.css
// static/css/tutortool.css
// static/html/base.tpl
// static/html/error.tpl
// static/html/index.tpl
// static/html/overview.tpl
// static/html/students.tpl
// static/html/tasks.tpl
// static/images/progressing.gif
// static/images/progressing2.gif
// static/images/progressing3.gif
// static/js/Chart.bundle.min.js
// static/js/array.js
// static/js/components/button.js
// static/js/components/col.js
// static/js/components/jquery.wrapper.js
// static/js/components/panel.js
// static/js/components/preformatted.js
// static/js/components/row.js
// static/js/components/table.js
// static/js/components/textarea.js
// static/js/components/viewport.js
// static/js/diff.min.js
// static/js/ie10-viewport-bug-workaround.js
// static/js/map.js
// static/js/object.js
// static/js/parallel.js
// static/js/prism.min.js
// static/js/string.js
// static/js/tt_overview.js
// static/js/tutortool/api-commontasks.js
// static/js/tutortool/api-tasks.js
// static/js/tutortool/api.js
// static/js/tutortool/tutortool.js
// static/js/viewport/manager.js
// static/js/views/students/detailview.js
// static/js/views/students/main.js
// static/js/views/students/makeGccTable.js
// static/js/views/students/makeRunTable.js
// static/js/views/students/tasks.js
// static/js/views/tasks/main.js
// DO NOT EDIT!

package bindata

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// staticBootstrapCssBootstrapThemeCss reads file data from disk. It returns an error on failure.
func staticBootstrapCssBootstrapThemeCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/css/bootstrap-theme.css"
	name := "static/bootstrap/css/bootstrap-theme.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapCssBootstrapThemeCssMap reads file data from disk. It returns an error on failure.
func staticBootstrapCssBootstrapThemeCssMap() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/css/bootstrap-theme.css.map"
	name := "static/bootstrap/css/bootstrap-theme.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapCssBootstrapThemeMinCss reads file data from disk. It returns an error on failure.
func staticBootstrapCssBootstrapThemeMinCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/css/bootstrap-theme.min.css"
	name := "static/bootstrap/css/bootstrap-theme.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapCssBootstrapThemeMinCssMap reads file data from disk. It returns an error on failure.
func staticBootstrapCssBootstrapThemeMinCssMap() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/css/bootstrap-theme.min.css.map"
	name := "static/bootstrap/css/bootstrap-theme.min.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapCssBootstrapCss reads file data from disk. It returns an error on failure.
func staticBootstrapCssBootstrapCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/css/bootstrap.css"
	name := "static/bootstrap/css/bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapCssBootstrapCssMap reads file data from disk. It returns an error on failure.
func staticBootstrapCssBootstrapCssMap() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/css/bootstrap.css.map"
	name := "static/bootstrap/css/bootstrap.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func staticBootstrapCssBootstrapMinCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/css/bootstrap.min.css"
	name := "static/bootstrap/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapCssBootstrapMinCssMap reads file data from disk. It returns an error on failure.
func staticBootstrapCssBootstrapMinCssMap() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/css/bootstrap.min.css.map"
	name := "static/bootstrap/css/bootstrap.min.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func staticBootstrapFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/fonts/glyphicons-halflings-regular.eot"
	name := "static/bootstrap/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func staticBootstrapFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/fonts/glyphicons-halflings-regular.svg"
	name := "static/bootstrap/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func staticBootstrapFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/fonts/glyphicons-halflings-regular.ttf"
	name := "static/bootstrap/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func staticBootstrapFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/fonts/glyphicons-halflings-regular.woff"
	name := "static/bootstrap/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapFontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func staticBootstrapFontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/fonts/glyphicons-halflings-regular.woff2"
	name := "static/bootstrap/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapJsBootstrapJs reads file data from disk. It returns an error on failure.
func staticBootstrapJsBootstrapJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/js/bootstrap.js"
	name := "static/bootstrap/js/bootstrap.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func staticBootstrapJsBootstrapMinJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/js/bootstrap.min.js"
	name := "static/bootstrap/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapJsNpmJs reads file data from disk. It returns an error on failure.
func staticBootstrapJsNpmJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap/js/npm.js"
	name := "static/bootstrap/js/npm.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldCssBootstrapThemeCss reads file data from disk. It returns an error on failure.
func staticBootstrapOldCssBootstrapThemeCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/css/bootstrap-theme.css"
	name := "static/bootstrap~old/css/bootstrap-theme.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldCssBootstrapThemeCssMap reads file data from disk. It returns an error on failure.
func staticBootstrapOldCssBootstrapThemeCssMap() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/css/bootstrap-theme.css.map"
	name := "static/bootstrap~old/css/bootstrap-theme.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldCssBootstrapThemeMinCss reads file data from disk. It returns an error on failure.
func staticBootstrapOldCssBootstrapThemeMinCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/css/bootstrap-theme.min.css"
	name := "static/bootstrap~old/css/bootstrap-theme.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldCssBootstrapThemeMinCssMap reads file data from disk. It returns an error on failure.
func staticBootstrapOldCssBootstrapThemeMinCssMap() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/css/bootstrap-theme.min.css.map"
	name := "static/bootstrap~old/css/bootstrap-theme.min.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldCssBootstrapCss reads file data from disk. It returns an error on failure.
func staticBootstrapOldCssBootstrapCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/css/bootstrap.css"
	name := "static/bootstrap~old/css/bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldCssBootstrapCssMap reads file data from disk. It returns an error on failure.
func staticBootstrapOldCssBootstrapCssMap() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/css/bootstrap.css.map"
	name := "static/bootstrap~old/css/bootstrap.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func staticBootstrapOldCssBootstrapMinCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/css/bootstrap.min.css"
	name := "static/bootstrap~old/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldCssBootstrapMinCssMap reads file data from disk. It returns an error on failure.
func staticBootstrapOldCssBootstrapMinCssMap() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/css/bootstrap.min.css.map"
	name := "static/bootstrap~old/css/bootstrap.min.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func staticBootstrapOldFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/fonts/glyphicons-halflings-regular.eot"
	name := "static/bootstrap~old/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func staticBootstrapOldFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/fonts/glyphicons-halflings-regular.svg"
	name := "static/bootstrap~old/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func staticBootstrapOldFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/fonts/glyphicons-halflings-regular.ttf"
	name := "static/bootstrap~old/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func staticBootstrapOldFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/fonts/glyphicons-halflings-regular.woff"
	name := "static/bootstrap~old/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldFontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func staticBootstrapOldFontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/fonts/glyphicons-halflings-regular.woff2"
	name := "static/bootstrap~old/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldJsBootstrapJs reads file data from disk. It returns an error on failure.
func staticBootstrapOldJsBootstrapJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/js/bootstrap.js"
	name := "static/bootstrap~old/js/bootstrap.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func staticBootstrapOldJsBootstrapMinJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/js/bootstrap.min.js"
	name := "static/bootstrap~old/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticBootstrapOldJsNpmJs reads file data from disk. It returns an error on failure.
func staticBootstrapOldJsNpmJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/bootstrap~old/js/npm.js"
	name := "static/bootstrap~old/js/npm.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssIe10ViewportBugWorkaroundCss reads file data from disk. It returns an error on failure.
func staticCssIe10ViewportBugWorkaroundCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/css/ie10-viewport-bug-workaround.css"
	name := "static/css/ie10-viewport-bug-workaround.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssJquery311MinJs reads file data from disk. It returns an error on failure.
func staticCssJquery311MinJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/css/jquery-3.1.1.min.js"
	name := "static/css/jquery-3.1.1.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssPrismMinCss reads file data from disk. It returns an error on failure.
func staticCssPrismMinCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/css/prism.min.css"
	name := "static/css/prism.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssStickyFooterNavbarCss reads file data from disk. It returns an error on failure.
func staticCssStickyFooterNavbarCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/css/sticky-footer-navbar.css"
	name := "static/css/sticky-footer-navbar.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssTt_overviewCss reads file data from disk. It returns an error on failure.
func staticCssTt_overviewCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/css/tt_overview.css"
	name := "static/css/tt_overview.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssTutortoolCss reads file data from disk. It returns an error on failure.
func staticCssTutortoolCss() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/css/tutortool.css"
	name := "static/css/tutortool.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHtmlBaseTpl reads file data from disk. It returns an error on failure.
func staticHtmlBaseTpl() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/html/base.tpl"
	name := "static/html/base.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHtmlErrorTpl reads file data from disk. It returns an error on failure.
func staticHtmlErrorTpl() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/html/error.tpl"
	name := "static/html/error.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHtmlIndexTpl reads file data from disk. It returns an error on failure.
func staticHtmlIndexTpl() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/html/index.tpl"
	name := "static/html/index.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHtmlOverviewTpl reads file data from disk. It returns an error on failure.
func staticHtmlOverviewTpl() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/html/overview.tpl"
	name := "static/html/overview.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHtmlStudentsTpl reads file data from disk. It returns an error on failure.
func staticHtmlStudentsTpl() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/html/students.tpl"
	name := "static/html/students.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHtmlTasksTpl reads file data from disk. It returns an error on failure.
func staticHtmlTasksTpl() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/html/tasks.tpl"
	name := "static/html/tasks.tpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesProgressingGif reads file data from disk. It returns an error on failure.
func staticImagesProgressingGif() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/images/progressing.gif"
	name := "static/images/progressing.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesProgressing2Gif reads file data from disk. It returns an error on failure.
func staticImagesProgressing2Gif() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/images/progressing2.gif"
	name := "static/images/progressing2.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImagesProgressing3Gif reads file data from disk. It returns an error on failure.
func staticImagesProgressing3Gif() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/images/progressing3.gif"
	name := "static/images/progressing3.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsChartBundleMinJs reads file data from disk. It returns an error on failure.
func staticJsChartBundleMinJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/Chart.bundle.min.js"
	name := "static/js/Chart.bundle.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsArrayJs reads file data from disk. It returns an error on failure.
func staticJsArrayJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/array.js"
	name := "static/js/array.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsComponentsButtonJs reads file data from disk. It returns an error on failure.
func staticJsComponentsButtonJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/components/button.js"
	name := "static/js/components/button.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsComponentsColJs reads file data from disk. It returns an error on failure.
func staticJsComponentsColJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/components/col.js"
	name := "static/js/components/col.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsComponentsJqueryWrapperJs reads file data from disk. It returns an error on failure.
func staticJsComponentsJqueryWrapperJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/components/jquery.wrapper.js"
	name := "static/js/components/jquery.wrapper.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsComponentsPanelJs reads file data from disk. It returns an error on failure.
func staticJsComponentsPanelJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/components/panel.js"
	name := "static/js/components/panel.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsComponentsPreformattedJs reads file data from disk. It returns an error on failure.
func staticJsComponentsPreformattedJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/components/preformatted.js"
	name := "static/js/components/preformatted.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsComponentsRowJs reads file data from disk. It returns an error on failure.
func staticJsComponentsRowJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/components/row.js"
	name := "static/js/components/row.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsComponentsTableJs reads file data from disk. It returns an error on failure.
func staticJsComponentsTableJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/components/table.js"
	name := "static/js/components/table.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsComponentsTextareaJs reads file data from disk. It returns an error on failure.
func staticJsComponentsTextareaJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/components/textarea.js"
	name := "static/js/components/textarea.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsComponentsViewportJs reads file data from disk. It returns an error on failure.
func staticJsComponentsViewportJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/components/viewport.js"
	name := "static/js/components/viewport.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDiffMinJs reads file data from disk. It returns an error on failure.
func staticJsDiffMinJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/diff.min.js"
	name := "static/js/diff.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsIe10ViewportBugWorkaroundJs reads file data from disk. It returns an error on failure.
func staticJsIe10ViewportBugWorkaroundJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/ie10-viewport-bug-workaround.js"
	name := "static/js/ie10-viewport-bug-workaround.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsMapJs reads file data from disk. It returns an error on failure.
func staticJsMapJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/map.js"
	name := "static/js/map.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsObjectJs reads file data from disk. It returns an error on failure.
func staticJsObjectJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/object.js"
	name := "static/js/object.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsParallelJs reads file data from disk. It returns an error on failure.
func staticJsParallelJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/parallel.js"
	name := "static/js/parallel.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsPrismMinJs reads file data from disk. It returns an error on failure.
func staticJsPrismMinJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/prism.min.js"
	name := "static/js/prism.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsStringJs reads file data from disk. It returns an error on failure.
func staticJsStringJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/string.js"
	name := "static/js/string.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsTt_overviewJs reads file data from disk. It returns an error on failure.
func staticJsTt_overviewJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/tt_overview.js"
	name := "static/js/tt_overview.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsTutortoolApiCommontasksJs reads file data from disk. It returns an error on failure.
func staticJsTutortoolApiCommontasksJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/tutortool/api-commontasks.js"
	name := "static/js/tutortool/api-commontasks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsTutortoolApiTasksJs reads file data from disk. It returns an error on failure.
func staticJsTutortoolApiTasksJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/tutortool/api-tasks.js"
	name := "static/js/tutortool/api-tasks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsTutortoolApiJs reads file data from disk. It returns an error on failure.
func staticJsTutortoolApiJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/tutortool/api.js"
	name := "static/js/tutortool/api.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsTutortoolTutortoolJs reads file data from disk. It returns an error on failure.
func staticJsTutortoolTutortoolJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/tutortool/tutortool.js"
	name := "static/js/tutortool/tutortool.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsViewportManagerJs reads file data from disk. It returns an error on failure.
func staticJsViewportManagerJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/viewport/manager.js"
	name := "static/js/viewport/manager.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsViewsStudentsDetailviewJs reads file data from disk. It returns an error on failure.
func staticJsViewsStudentsDetailviewJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/views/students/detailview.js"
	name := "static/js/views/students/detailview.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsViewsStudentsMainJs reads file data from disk. It returns an error on failure.
func staticJsViewsStudentsMainJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/views/students/main.js"
	name := "static/js/views/students/main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsViewsStudentsMakegcctableJs reads file data from disk. It returns an error on failure.
func staticJsViewsStudentsMakegcctableJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/views/students/makeGccTable.js"
	name := "static/js/views/students/makeGccTable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsViewsStudentsMakeruntableJs reads file data from disk. It returns an error on failure.
func staticJsViewsStudentsMakeruntableJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/views/students/makeRunTable.js"
	name := "static/js/views/students/makeRunTable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsViewsStudentsTasksJs reads file data from disk. It returns an error on failure.
func staticJsViewsStudentsTasksJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/views/students/tasks.js"
	name := "static/js/views/students/tasks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsViewsTasksMainJs reads file data from disk. It returns an error on failure.
func staticJsViewsTasksMainJs() (*asset, error) {
	path := "/home/nighty/go-workspace/src/github.com/ms-xy/Tutortool/static/js/views/tasks/main.js"
	name := "static/js/views/tasks/main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/bootstrap/css/bootstrap-theme.css": staticBootstrapCssBootstrapThemeCss,
	"static/bootstrap/css/bootstrap-theme.css.map": staticBootstrapCssBootstrapThemeCssMap,
	"static/bootstrap/css/bootstrap-theme.min.css": staticBootstrapCssBootstrapThemeMinCss,
	"static/bootstrap/css/bootstrap-theme.min.css.map": staticBootstrapCssBootstrapThemeMinCssMap,
	"static/bootstrap/css/bootstrap.css": staticBootstrapCssBootstrapCss,
	"static/bootstrap/css/bootstrap.css.map": staticBootstrapCssBootstrapCssMap,
	"static/bootstrap/css/bootstrap.min.css": staticBootstrapCssBootstrapMinCss,
	"static/bootstrap/css/bootstrap.min.css.map": staticBootstrapCssBootstrapMinCssMap,
	"static/bootstrap/fonts/glyphicons-halflings-regular.eot": staticBootstrapFontsGlyphiconsHalflingsRegularEot,
	"static/bootstrap/fonts/glyphicons-halflings-regular.svg": staticBootstrapFontsGlyphiconsHalflingsRegularSvg,
	"static/bootstrap/fonts/glyphicons-halflings-regular.ttf": staticBootstrapFontsGlyphiconsHalflingsRegularTtf,
	"static/bootstrap/fonts/glyphicons-halflings-regular.woff": staticBootstrapFontsGlyphiconsHalflingsRegularWoff,
	"static/bootstrap/fonts/glyphicons-halflings-regular.woff2": staticBootstrapFontsGlyphiconsHalflingsRegularWoff2,
	"static/bootstrap/js/bootstrap.js": staticBootstrapJsBootstrapJs,
	"static/bootstrap/js/bootstrap.min.js": staticBootstrapJsBootstrapMinJs,
	"static/bootstrap/js/npm.js": staticBootstrapJsNpmJs,
	"static/bootstrap~old/css/bootstrap-theme.css": staticBootstrapOldCssBootstrapThemeCss,
	"static/bootstrap~old/css/bootstrap-theme.css.map": staticBootstrapOldCssBootstrapThemeCssMap,
	"static/bootstrap~old/css/bootstrap-theme.min.css": staticBootstrapOldCssBootstrapThemeMinCss,
	"static/bootstrap~old/css/bootstrap-theme.min.css.map": staticBootstrapOldCssBootstrapThemeMinCssMap,
	"static/bootstrap~old/css/bootstrap.css": staticBootstrapOldCssBootstrapCss,
	"static/bootstrap~old/css/bootstrap.css.map": staticBootstrapOldCssBootstrapCssMap,
	"static/bootstrap~old/css/bootstrap.min.css": staticBootstrapOldCssBootstrapMinCss,
	"static/bootstrap~old/css/bootstrap.min.css.map": staticBootstrapOldCssBootstrapMinCssMap,
	"static/bootstrap~old/fonts/glyphicons-halflings-regular.eot": staticBootstrapOldFontsGlyphiconsHalflingsRegularEot,
	"static/bootstrap~old/fonts/glyphicons-halflings-regular.svg": staticBootstrapOldFontsGlyphiconsHalflingsRegularSvg,
	"static/bootstrap~old/fonts/glyphicons-halflings-regular.ttf": staticBootstrapOldFontsGlyphiconsHalflingsRegularTtf,
	"static/bootstrap~old/fonts/glyphicons-halflings-regular.woff": staticBootstrapOldFontsGlyphiconsHalflingsRegularWoff,
	"static/bootstrap~old/fonts/glyphicons-halflings-regular.woff2": staticBootstrapOldFontsGlyphiconsHalflingsRegularWoff2,
	"static/bootstrap~old/js/bootstrap.js": staticBootstrapOldJsBootstrapJs,
	"static/bootstrap~old/js/bootstrap.min.js": staticBootstrapOldJsBootstrapMinJs,
	"static/bootstrap~old/js/npm.js": staticBootstrapOldJsNpmJs,
	"static/css/ie10-viewport-bug-workaround.css": staticCssIe10ViewportBugWorkaroundCss,
	"static/css/jquery-3.1.1.min.js": staticCssJquery311MinJs,
	"static/css/prism.min.css": staticCssPrismMinCss,
	"static/css/sticky-footer-navbar.css": staticCssStickyFooterNavbarCss,
	"static/css/tt_overview.css": staticCssTt_overviewCss,
	"static/css/tutortool.css": staticCssTutortoolCss,
	"static/html/base.tpl": staticHtmlBaseTpl,
	"static/html/error.tpl": staticHtmlErrorTpl,
	"static/html/index.tpl": staticHtmlIndexTpl,
	"static/html/overview.tpl": staticHtmlOverviewTpl,
	"static/html/students.tpl": staticHtmlStudentsTpl,
	"static/html/tasks.tpl": staticHtmlTasksTpl,
	"static/images/progressing.gif": staticImagesProgressingGif,
	"static/images/progressing2.gif": staticImagesProgressing2Gif,
	"static/images/progressing3.gif": staticImagesProgressing3Gif,
	"static/js/Chart.bundle.min.js": staticJsChartBundleMinJs,
	"static/js/array.js": staticJsArrayJs,
	"static/js/components/button.js": staticJsComponentsButtonJs,
	"static/js/components/col.js": staticJsComponentsColJs,
	"static/js/components/jquery.wrapper.js": staticJsComponentsJqueryWrapperJs,
	"static/js/components/panel.js": staticJsComponentsPanelJs,
	"static/js/components/preformatted.js": staticJsComponentsPreformattedJs,
	"static/js/components/row.js": staticJsComponentsRowJs,
	"static/js/components/table.js": staticJsComponentsTableJs,
	"static/js/components/textarea.js": staticJsComponentsTextareaJs,
	"static/js/components/viewport.js": staticJsComponentsViewportJs,
	"static/js/diff.min.js": staticJsDiffMinJs,
	"static/js/ie10-viewport-bug-workaround.js": staticJsIe10ViewportBugWorkaroundJs,
	"static/js/map.js": staticJsMapJs,
	"static/js/object.js": staticJsObjectJs,
	"static/js/parallel.js": staticJsParallelJs,
	"static/js/prism.min.js": staticJsPrismMinJs,
	"static/js/string.js": staticJsStringJs,
	"static/js/tt_overview.js": staticJsTt_overviewJs,
	"static/js/tutortool/api-commontasks.js": staticJsTutortoolApiCommontasksJs,
	"static/js/tutortool/api-tasks.js": staticJsTutortoolApiTasksJs,
	"static/js/tutortool/api.js": staticJsTutortoolApiJs,
	"static/js/tutortool/tutortool.js": staticJsTutortoolTutortoolJs,
	"static/js/viewport/manager.js": staticJsViewportManagerJs,
	"static/js/views/students/detailview.js": staticJsViewsStudentsDetailviewJs,
	"static/js/views/students/main.js": staticJsViewsStudentsMainJs,
	"static/js/views/students/makeGccTable.js": staticJsViewsStudentsMakegcctableJs,
	"static/js/views/students/makeRunTable.js": staticJsViewsStudentsMakeruntableJs,
	"static/js/views/students/tasks.js": staticJsViewsStudentsTasksJs,
	"static/js/views/tasks/main.js": staticJsViewsTasksMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": {nil, map[string]*bintree{
		"bootstrap": {nil, map[string]*bintree{
			"css": {nil, map[string]*bintree{
				"bootstrap-theme.css": {staticBootstrapCssBootstrapThemeCss, map[string]*bintree{}},
				"bootstrap-theme.css.map": {staticBootstrapCssBootstrapThemeCssMap, map[string]*bintree{}},
				"bootstrap-theme.min.css": {staticBootstrapCssBootstrapThemeMinCss, map[string]*bintree{}},
				"bootstrap-theme.min.css.map": {staticBootstrapCssBootstrapThemeMinCssMap, map[string]*bintree{}},
				"bootstrap.css": {staticBootstrapCssBootstrapCss, map[string]*bintree{}},
				"bootstrap.css.map": {staticBootstrapCssBootstrapCssMap, map[string]*bintree{}},
				"bootstrap.min.css": {staticBootstrapCssBootstrapMinCss, map[string]*bintree{}},
				"bootstrap.min.css.map": {staticBootstrapCssBootstrapMinCssMap, map[string]*bintree{}},
			}},
			"fonts": {nil, map[string]*bintree{
				"glyphicons-halflings-regular.eot": {staticBootstrapFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
				"glyphicons-halflings-regular.svg": {staticBootstrapFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
				"glyphicons-halflings-regular.ttf": {staticBootstrapFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
				"glyphicons-halflings-regular.woff": {staticBootstrapFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
				"glyphicons-halflings-regular.woff2": {staticBootstrapFontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{}},
			}},
			"js": {nil, map[string]*bintree{
				"bootstrap.js": {staticBootstrapJsBootstrapJs, map[string]*bintree{}},
				"bootstrap.min.js": {staticBootstrapJsBootstrapMinJs, map[string]*bintree{}},
				"npm.js": {staticBootstrapJsNpmJs, map[string]*bintree{}},
			}},
		}},
		"bootstrap~old": {nil, map[string]*bintree{
			"css": {nil, map[string]*bintree{
				"bootstrap-theme.css": {staticBootstrapOldCssBootstrapThemeCss, map[string]*bintree{}},
				"bootstrap-theme.css.map": {staticBootstrapOldCssBootstrapThemeCssMap, map[string]*bintree{}},
				"bootstrap-theme.min.css": {staticBootstrapOldCssBootstrapThemeMinCss, map[string]*bintree{}},
				"bootstrap-theme.min.css.map": {staticBootstrapOldCssBootstrapThemeMinCssMap, map[string]*bintree{}},
				"bootstrap.css": {staticBootstrapOldCssBootstrapCss, map[string]*bintree{}},
				"bootstrap.css.map": {staticBootstrapOldCssBootstrapCssMap, map[string]*bintree{}},
				"bootstrap.min.css": {staticBootstrapOldCssBootstrapMinCss, map[string]*bintree{}},
				"bootstrap.min.css.map": {staticBootstrapOldCssBootstrapMinCssMap, map[string]*bintree{}},
			}},
			"fonts": {nil, map[string]*bintree{
				"glyphicons-halflings-regular.eot": {staticBootstrapOldFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{}},
				"glyphicons-halflings-regular.svg": {staticBootstrapOldFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{}},
				"glyphicons-halflings-regular.ttf": {staticBootstrapOldFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{}},
				"glyphicons-halflings-regular.woff": {staticBootstrapOldFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{}},
				"glyphicons-halflings-regular.woff2": {staticBootstrapOldFontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{}},
			}},
			"js": {nil, map[string]*bintree{
				"bootstrap.js": {staticBootstrapOldJsBootstrapJs, map[string]*bintree{}},
				"bootstrap.min.js": {staticBootstrapOldJsBootstrapMinJs, map[string]*bintree{}},
				"npm.js": {staticBootstrapOldJsNpmJs, map[string]*bintree{}},
			}},
		}},
		"css": {nil, map[string]*bintree{
			"ie10-viewport-bug-workaround.css": {staticCssIe10ViewportBugWorkaroundCss, map[string]*bintree{}},
			"jquery-3.1.1.min.js": {staticCssJquery311MinJs, map[string]*bintree{}},
			"prism.min.css": {staticCssPrismMinCss, map[string]*bintree{}},
			"sticky-footer-navbar.css": {staticCssStickyFooterNavbarCss, map[string]*bintree{}},
			"tt_overview.css": {staticCssTt_overviewCss, map[string]*bintree{}},
			"tutortool.css": {staticCssTutortoolCss, map[string]*bintree{}},
		}},
		"html": {nil, map[string]*bintree{
			"base.tpl": {staticHtmlBaseTpl, map[string]*bintree{}},
			"error.tpl": {staticHtmlErrorTpl, map[string]*bintree{}},
			"index.tpl": {staticHtmlIndexTpl, map[string]*bintree{}},
			"overview.tpl": {staticHtmlOverviewTpl, map[string]*bintree{}},
			"students.tpl": {staticHtmlStudentsTpl, map[string]*bintree{}},
			"tasks.tpl": {staticHtmlTasksTpl, map[string]*bintree{}},
		}},
		"images": {nil, map[string]*bintree{
			"progressing.gif": {staticImagesProgressingGif, map[string]*bintree{}},
			"progressing2.gif": {staticImagesProgressing2Gif, map[string]*bintree{}},
			"progressing3.gif": {staticImagesProgressing3Gif, map[string]*bintree{}},
		}},
		"js": {nil, map[string]*bintree{
			"Chart.bundle.min.js": {staticJsChartBundleMinJs, map[string]*bintree{}},
			"array.js": {staticJsArrayJs, map[string]*bintree{}},
			"components": {nil, map[string]*bintree{
				"button.js": {staticJsComponentsButtonJs, map[string]*bintree{}},
				"col.js": {staticJsComponentsColJs, map[string]*bintree{}},
				"jquery.wrapper.js": {staticJsComponentsJqueryWrapperJs, map[string]*bintree{}},
				"panel.js": {staticJsComponentsPanelJs, map[string]*bintree{}},
				"preformatted.js": {staticJsComponentsPreformattedJs, map[string]*bintree{}},
				"row.js": {staticJsComponentsRowJs, map[string]*bintree{}},
				"table.js": {staticJsComponentsTableJs, map[string]*bintree{}},
				"textarea.js": {staticJsComponentsTextareaJs, map[string]*bintree{}},
				"viewport.js": {staticJsComponentsViewportJs, map[string]*bintree{}},
			}},
			"diff.min.js": {staticJsDiffMinJs, map[string]*bintree{}},
			"ie10-viewport-bug-workaround.js": {staticJsIe10ViewportBugWorkaroundJs, map[string]*bintree{}},
			"map.js": {staticJsMapJs, map[string]*bintree{}},
			"object.js": {staticJsObjectJs, map[string]*bintree{}},
			"parallel.js": {staticJsParallelJs, map[string]*bintree{}},
			"prism.min.js": {staticJsPrismMinJs, map[string]*bintree{}},
			"string.js": {staticJsStringJs, map[string]*bintree{}},
			"tt_overview.js": {staticJsTt_overviewJs, map[string]*bintree{}},
			"tutortool": {nil, map[string]*bintree{
				"api-commontasks.js": {staticJsTutortoolApiCommontasksJs, map[string]*bintree{}},
				"api-tasks.js": {staticJsTutortoolApiTasksJs, map[string]*bintree{}},
				"api.js": {staticJsTutortoolApiJs, map[string]*bintree{}},
				"tutortool.js": {staticJsTutortoolTutortoolJs, map[string]*bintree{}},
			}},
			"viewport": {nil, map[string]*bintree{
				"manager.js": {staticJsViewportManagerJs, map[string]*bintree{}},
			}},
			"views": {nil, map[string]*bintree{
				"students": {nil, map[string]*bintree{
					"detailview.js": {staticJsViewsStudentsDetailviewJs, map[string]*bintree{}},
					"main.js": {staticJsViewsStudentsMainJs, map[string]*bintree{}},
					"makeGccTable.js": {staticJsViewsStudentsMakegcctableJs, map[string]*bintree{}},
					"makeRunTable.js": {staticJsViewsStudentsMakeruntableJs, map[string]*bintree{}},
					"tasks.js": {staticJsViewsStudentsTasksJs, map[string]*bintree{}},
				}},
				"tasks": {nil, map[string]*bintree{
					"main.js": {staticJsViewsTasksMainJs, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
